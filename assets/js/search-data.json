{"0": {
    "doc": "Licenses",
    "title": "Licenses",
    "content": " ",
    "url": "/pages/study-game-engines/f3d/_licenses.html",
    
    "relUrl": "/_licenses.html"
  },"1": {
    "doc": "Contribute",
    "title": "Contribute",
    "content": "# How to contribute F3D welcomes all contributors, regardless of skill level or experience! ## Contributing as a user Contributing to F3D can be as simple as pointing out a spelling mistake on the website, reporting a bug you encountered, or suggesting a new feature you feel would improve the application. We use [Github](https://github.com/f3d-app/f3d) to manage the project and you can report new issues or weigh in on existing ones [over there](https://github.com/f3d-app/f3d/issues). Also, do not hesitate to join our [discord](https://discord.f3d.app)! ## How to get started with development To contribute to F3D as a developer, first you may want to try and build F3D for yourself. If you are already familiar with software compilation, you can take a look at our [build](/pages/study-game-engines/f3d/doc/dev/BUILD.html) guide. If not, you may want to look at our [getting started](/pages/study-game-engines/f3d/doc/dev/GETTING_STARTED.html) guide, that provide steps to compile F3D. Once you are able to build F3D, you may want to take a look at the opened [issues](https://github.com/f3d-app/f3d/issues), especially, the ones with the [\"good first issue\"](https://github.com/f3d-app/f3d/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22) label. If one sounds interesting to you, then you should just go ahead and comment on the issue and ask for any help or clarification needed. F3D maintainers will see your comment and provide guidance as needed. You can also reach out on discord. You can then fix the issue in your side and contribute it to the F3D repository, by following the workflow described below. Of course, if you are already using F3D and want to improve it for your specific needs, because you want a feature or found a bug, that is definitely possible. Feel free to reach out for guidance by opening an issue or asking on discord. Another way to get started is to improve the documentation. ## F3D Development workflow F3D uses the [gitlab flow](https://docs.gitlab.com/ee/topics/gitlab_flow.html). In a few words, here is how to contribute: - [Fork](https://github.com/f3d-app/f3d/fork) F3D repository on github. - Create and push a feature branch on your fork containing new commits. - When it is ready for review or when you want to run the CI, create a pull request against `f3d-app/f3d/master`. - Once the PR is approved and CI comes back clean, a F3D maintainer will merge your pull request in the master branch - The master now contains your changes and will be present in the next release! ## Continuous Integration F3D has a pretty extensive continuous integration trying to cover all usecases for F3D. It means that if your change break the CI in your PR, it will not be merged until the breaking change are addressed. It also means that adding a new feature or behavior means adding a associated test. Make sure to check the results for yourself, and ask for help if needed. F3D continuous integration will also check the coverage as it is a good way to evaluate if new features are being tested or not. When adding code to F3D, always try to cover it by adding/modifying [tests](/pages/study-game-engines/f3d/doc/dev/TESTING.html). F3D continuous integration also check formatting using clang-format and will inform you if changes needs to be made. However, some [formatting rules](/pages/study-game-engines/f3d/doc/dev/CODING_STYLE.html) are not enforced by clang-format and will be checked during the review process. When making changes to the libf3d public API, the CI will warn about making related changes to the bindings. This is required in order to merge the PR. ## Changelog Whenever you make significant changes, either bugfixes or features, please update the [changelog](/pages/study-game-engines/f3d/doc/CHANGELOG.html) \"Ongoing development\" section. There are three subsections. \"For F3D Users\" are changes that impact actual F3D users and related to F3D behaviors changing. \"For developers\" are change that impact developers that build F3D. \"For F3D packagers\" are for changes that impact anyone packaging F3D, eg: new CMake options. ## F3D architecture F3D is separated in different components: - The F3D application, in the application folder. - The libf3d, in the library folder. - The VTKExtensions in the library/VTKExtensions folder. - The bindings, python, java and webassembly, in the respective directories. - The plugins, providing all the different readers in the plugins directory. VTKExtensions are separated in different modules. - Core, that do not depend on any other VTKExtensions modules are provide services for all modules - Readers, that depends on Core and implements many new VTK readers and importers - Rendering, that depends on Core and implements the rendering specificities of F3D - Applicative, the depends on all other VTKExtension modules and provide services for the libf3d library The libf3d implements the whole logic of instancing and manipulating the different VTK classes, it is fully documented [here](doc/libf3d/README.md). The F3D application itself uses the libf3d but adds an applicative layer on top of it, especially the handling of [command line options](/pages/study-game-engines/f3d/doc/user/OPTIONS.html) and [configuration file](/pages/study-game-engines/f3d/doc/user/CONFIGURATION_FILE.html). ",
    "url": "/pages/study-game-engines/f3d/CONTRIBUTING.html",
    
    "relUrl": "/CONTRIBUTING.html"
  },"2": {
    "doc": "License",
    "title": "License",
    "content": "BSD 3-Clause License * Copyright 2019-2021 Kitware SAS * Copyright 2021-2023 Michael Migliore, Mathieu Westphal All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. * Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. ",
    "url": "/pages/study-game-engines/f3d/LICENSE.html",
    
    "relUrl": "/LICENSE.html"
  },"3": {
    "doc": "Home",
    "title": "Home",
    "content": "[![CI](https://img.shields.io/github/actions/workflow/status/f3d-app/f3d/ci.yml?label=CI&logo=github)](https://github.com/f3d-app/f3d/actions/workflows/ci.yml) [![Packaging](https://img.shields.io/github/actions/workflow/status/f3d-app/f3d-superbuild/nightly.yml?label=Packaging&logo=github)](https://github.com/f3d-app/f3d-superbuild) [![codecov](https://codecov.io/gh/f3d-app/f3d/branch/master/graph/badge.svg?token=siwG82IXK7)](https://codecov.io/gh/f3d-app/f3d) [![Downloads](https://img.shields.io/github/downloads/f3d-app/f3d/total.svg)](https://github.com/f3d-app/f3d/releases) [![Sponsors](https://img.shields.io/static/v1?label=Sponsor&message=%E2%9D%A4&logo=GitHub&color=%23fe8e86)](https://github.com/sponsors/f3d-app) [![Discord](https://discordapp.com/api/guilds/1046005690809978911/widget.png?style=shield)](https://discord.f3d.app) # F3D - Fast and minimalist 3D viewer By Michael Migliore and Mathieu Westphal. F3D (pronounced `/f…õd/`) is a fast and minimalist 3D viewer. It supports many file formats, from digital content to scientific datasets (including glTF, STL, STEP, PLY, OBJ, FBX, Alembic), can show animations and support thumbnails and many rendering and texturing options including real time physically based rendering and raytracing. It is fully controllable from the command line and support configuration files. It can provide thumbnails, support interactive hotkeys, drag&drop and integration into file managers. F3D also contains the libf3d, a simple library to render meshes, with C++ and Python Bindings, as well as experimental Java and Javascript bindings. *A typical render by F3D* *Animation of a glTF file within F3D* *A direct scalars render by F3D* See the [gallery](/pages/study-game-engines/f3d/doc/GALLERY.html) for more images, take a look at the [changelog](/pages/study-game-engines/f3d/doc/CHANGELOG.html) or go to the [releases page](https://github.com/f3d-app/f3d/releases) to download F3D! If you need any help or want to discuss with other F3D users and developers, head over to our [discord](https://discord.f3d.app). # Quickstart Open a file and visualize it interactively: ``` f3d /path/to/file.ext ``` Open a file and save the rendering into an image file: ``` f3d /path/to/file.ext --output=/path/to/img.png ``` Get help: ``` f3d --help man f3d # Linux only ``` # Documentation - To get started, please take a look at the [user documentation](/pages/study-game-engines/f3d/doc/user/README_USER.html). - If you need any help, are looking for a feature or found a bug, please open an [issue](https://github.com/f3d-app/f3d/issues). - If you want to use the libf3d, please take a look at its [documentation](/pages/study-game-engines/f3d/doc/libf3d/README_LIBF3D.html). - If you want to build F3D, please take a look at the [developer documentation](/pages/study-game-engines/f3d/doc/dev/README_DEV.html). # Support F3D is developed by a team of passionate devs. Please use F3D, star it on github or even become a [sponsor](https://github.com/sponsors/f3d-app) to support us! ## Contributing We envision F3D as a community-driven project, we love to see how the project is growing thanks to the contributions from the community. We would love to see your face in the list below! If you want to contribute to F3D, you are very welcome to! Take a look at our [contribution documentation](/pages/study-game-engines/f3d/CONTRIBUTING.html). # Acknowledgments F3D was initially created by [Kitware SAS](https://www.kitware.eu/) and is relying on many awesome open source projects, including [VTK](https://vtk.org/), [OCCT](https://dev.opencascade.org/), [Assimp](https://www.assimp.org/), [Alembic](http://www.alembic.io/), [Draco](https://google.github.io/draco/) and [OSPRay](https://www.ospray.org/). # License F3D can be used and distributed under the 3-Clause BSD License, see the [license](/pages/study-game-engines/f3d/LICENSE.html). F3D integrate the sources of other libraries and tools, all under permissive licenses, see the [third party licenses](/pages/study-game-engines/f3d/doc/THIRD_PARTY_LICENSES.html). F3D packages relies on other libraries and tools, all under permissive licenses, all listed in the respective packages. ",
    "url": "/pages/study-game-engines/f3d/",
    
    "relUrl": "/"
  },"4": {
    "doc": "Changelog",
    "title": "Changelog",
    "content": "# Changelog ## Ongoing development ## v2.2.1 For F3D users: - Added a native Apple Silicon release package - Added new options `hdri-file`, `hdri-ambient`, `hdri-skybox` to have more control on the HDRI behavior - Added a default HDRI used when providing no `hdri-file` - Added bindings to toggle HDRI ambient lighting (`F`) and HDRI skybox (`J`) - Added bindings to move the camera to standard locations: `1`: Front, `3`: Right, `7`: Top, `9`: Isometric - Added [Open CASCADE BRep format](https://dev.opencascade.org/doc/overview/html/specification__brep_format.html) to the OCCT plugin. - Fixed an infamous issue when the Windows thumbnailer always steal the focus - Fixed an issue with the binary release when opening draco files - Fixed an issue with matcap textures - Fixed an issue with HDRI lighting - Fixed an issue with HDRI lighting when dropping HDRI after a model - Fixed an issue where invalid option would not show on Windows - Fixed an issue where previously loaded file would stay visible - Fixed an issue when loading invalid EXR file as HDRI - Fixed cheatsheet menu rendering under 'Drop File Instructor' - Fixed raytracing rendering issues - Improved cheatsheet menu contrast for any background color - Improved overall text contrast for any background color - Improved performance when changing model and using a HDRI - Improved HDRI cache performance - Deprecated `hdri` option For libf3d users: - Reworked image API to support many file formats to read (EXR, HDR) and write (PNG, JPG, TIF, BMP) - Added `render.hdri.file`, `render.hdri.ambient`, `render.background.skybox` options. - Deprecated `render.background.hdri` in favor of new options above - Deprecated previous image API - Add `loader::loadGeometry` allowing loading geometry from memory buffers For developers: - Added a deprecation framework - Removed `F3D_TESTING_ENABLE_HDRI_TESTS` cmake option and merged it with `F3D_TESTING_ENABLE_LONG_TIMEOUT_TESTS` - Added a Getting Started guide for beginners developers For F3D packagers: - Fixed compatibility with FreeBSD ## v2.1.0 For F3D users: - Reworked Animation support and added many animation related options - Added `--camera-direction` and `--camera-zoom-factor` and use it in default config file - Added `--texture-matcap` option to load a MatCap texture - Added support for opening HDRI background with Drop - Added .exr support for HDRI and textures - Improved HDRI caching performance - Added a EGL headless binary release - Added typo suggestion when failing to use the right option name - Added `--invert-zoom` option (libf3d: `interactor.invert-zoom`) to invert zoom direction with right-click on mouse - Added support for keeping camera position when reloading a file with `UP` key - Added a `--grid-absolute` option (libf3d: `render.grid.absolute`) to position the grid instead of being below the model - Added a \"Drop Zone\" when starting F3D without loading a file - Added coloring support for STEP files in binary release - Fixed an issue on Windows where the error window would popup even with `--quiet` - Fixed an issue with 16 bit and 32 bit textures with assimp plugin - Fixed an issue on Windows where errors where not visible - Fixed an HDRI issue on reload - Fixed a crash when with the progress bar on reloading a file - Fixed an issue where certain options from config file would be ignored - Fixed a crash with many GLTF files when an array does not have a name - Fixed an issue where dropping a duplicate file would change the loaded file instead of not doing anything - Fixed an issue when loading an unsupported file - Fixed an issue with VRML files - Improved config file for .ply files - Improved config file regex so that they are case-insensitive - Improved `--up` option to support no sign and better validation - Improved F3D version reporting about itself and VTK (`--version`) - Improved documentation, testing, help - Excluded TIFF format from Windows Thumbnailer - Changed the automatic camera position to a version more close to the data - Reduced size of binary release by a factor of two For developers: - Added vcpkg support for dependency installation For F3D packagers: - Added a `F3D_PLUGIN_OCCT_COLORING_SUPPORT` CMake variable to control if this feature is compiled, default is ON - Added `SONAME` support - Added a `F3D_PLUGINS_INSTALL_DIR` CMake variable to control where to install plugins - Added a new module: `F3D_MODULE_EXR` that depends on openexr - Added support to use external `cxxopts` and external `nlohmann-json` - Fixed a link issue with VTK modules - Fixed a `@loader_path` issue on MacOS - Added support for `CMAKE_INSTALL_*DIR` variables on installation - Added support for building against a EGL enabled VTK - Fixed a compilation issue with VTK master Contributors: @DeveloperPaul123 @topazus @bkmgit @snoyer @Meakk @mwestphal ## v2.0.0 For F3D users: - Removed `--fullscreen` options completely - Added a `--position` option to set the position of the F3D window - Added a `--light-intensity` option and associated bindings - Improved fish and zsh completion - Added a new interaction to center the camera on the point under the cursor using *middle* mouse button - Added HDRi caching for improved performance - Added scene bounding box to the dump interaction - Reworked lighting for fullscene format files - Improved grid rendering and customization greatly with new options - Improved HDRi blur performance and customization - Added support for reading config file directory instead of a single file - Changed config file location on Windows - PostFX option names have been changed - Added an interaction (down arrow) to load all files from the directory containing the current file - Added a `--group-geometries` option to load multiple default scene file into a single render window For libf3d users: - Reworked loader API from scratch - Fixed an issue with engine creation in the Python bindings - Fixed an issue with image Python bindings - Improved libf3d examples - Added experimental javascript bindings based on webassembly/emscriptem - Added dynamic support for all `model` options - Added plugin SDK to create your own plugins for any file format For F3D packagers: - Added plugins support for true optional dependencies - Added a `F3D_APPLICATION_LINK_FILESYSTEM` CMake option to control if F3D should link explicitly against libstdc++fs - Removed most of `F3D_INSTALL_` options with the switch to a component-based approach - Removed installation of useless static libs from VTKExtensions (needs VTK master) - Fixed RPATH of F3D for system using lib64 instead of lib - Many CMake option name changed - Fixed data license to use only permissive license for F3D testing data - Removed packaging support from F3D Contributors: @snoyer @mzf-guest @CharlesGueunet @myd7349 @allemangD @Meakk @mwestphal ## v1.3.1 - Fix raytracing support - Fix macOS window positioning Contributors: @mwestphal @Meakk ## v1.3.0 Main new features and fixes: - Introducing an alpha version of the libf3d, see below for more information - Added a --font-file option - Added support for Alembic file format (.abc). Geometry only. Thanks a lot @nyue. - Fixed many HDRI issues - Fixed an important drag and drop issue on linux Other fixes: - Fixed many doc and UI typos - Fixed shell completion - Fixed multiple issue with image comparison - Fixed an issue with --line-width and --point-size with full scene formats - Fixed an issue with translucent object and RGBA texture - Fixed issues with a few specific .gltf files - Fixed a window title issue on MacOS - Fixed multiple issues with the output window on Windows - Fixed issues with file association and thumbnails on Windows - Fixed a small issue with the cheatsheet not appearing in some cases - Fixed an issue with certain .obj files - Fixed a clipping issue when setting camera position - Removed fullscreen hotkey For F3D developers: - Updated cxxopts to 3.0.0 - Now using json.hpp for parsing json config file - Better reproducible build support - Improved CI with coverage, sanitizer, dedicated actions for dependencies - Complete rework of the architecture to separate F3D, the application, the libf3d (see below) and a VTKExtensions layer. - Improved unit testing by adding test in the libf3d and VTKExtensions layer For libf3d users: - Introducing an alpha version of the libf3d! - The libf3d is a C++ library to open and render 3D meshes, it is of course used by F3D and supports python bindings - More info available in README_libf3d.md Binary Release Information: - The binary release is **not** built with raytracing support - This binary release is built with assimp 5.1.2, animation for assimp formats is not working well Contributors: @schuhumi @herrriehm @rafcon-dev @mzf-guest @nyue @jpouderoux @Meakk @mwestphal ## v1.2.1 Bug fixes and features: - Fixed a build issue on MacOS - Fixed a critical issue with the Windows Thumbnailer that could crash explorer.exe - Fixed the --quiet option so that it actually quiets VTK errors and warnings - Fixed an issue with output window popping up at each log on Windows - Added a `.deb` package for Linux Debian-based distros For Packagers: - LFS file have been added in source code release, this seems to be retroactive, so hash of previous releases may have changed - Flatpack org name has been fixed Contributors: @Meakk @mwestphal @jpouderoux ## v1.2.0 Main New Features: - Added STEP and IGES file format support thanks to @Open-Cascade-SAS /[OCCT](https://github.com/Open-Cascade-SAS/OCCT) (thanks @drtrigon) - Added FBX, DAE, OFF, and DXF file format support thanks to @assimp /[assimp](https://github.com/assimp/assimp) - Added thumbnail support with many linux file managers - Added thumbnail support on Windows - Added desktop environment integration in linux - Added scalar and scalar component looping Other New Features: - Added support for KHR_materials_unlit with glTF files (thanks @spiraloid) - Added option for selecting camera `--camera-index` (thanks @spiraloid) - Added coloring the to Windows error output window - Added a man entry on Linux - Added a `--config` option to select a config file to load instead of using default location - Added a `--quiet` option - Added `--camera-azimuth` and `--camera-elevation` options (thanks @tatsuya-s) - Added a metainfo.xml file (thanks @kevinsmia1939) Issue Fixes: - Fixed an issue with opening files with accented char in the name on Windows (thanks @shankarsivarajan) - Fixed HDRI orientation with --up option (thanks @truhlikfredy) - Fixed an issue with point cloud rendering - Fixed a crash on exit on Windows - Fixed an issue with fullscreen window size on Windows - Fixed offscreen rendering (`--output` and `--ref` ) to actually use offscreen rendering - Fixed a memory leak when no rendering is performed (thanks @CharlesGueunet) - Fixed a rendering issue with certain GPU drivers - Fixed tone mapping with background opacity - Fixed non-working drag and drop implementation in VTK (thanks @msbit) - Fixed a potential sorting issue when opening a folder - Fixed a crash with unsupported glTF files in VTK For Developers: - Full rework of the CI framework, including coverage report support - Full rework of the testing framework - Separation of vtkF3DRenderer in two classes - Separation of f3d executable into a libf3d library and f3d executable to support windows thumbnails For Packagers: - New CMake options to select file to install, all documented and starting with F3D_ - mime types file can be installed, make sure to trigger update-mime-databse - desktop file can be installed, make sure to trigger update-desktop-database Packagers: AndnoVember @jokersus @kevinsmia1939 @yurivict @bcdarwin @mzf-guest @Meakk @mwestphal Binary Release Information: - The binary release is **not** built with raytracing support - This binary release is built with assimp 5.1.2, animation for assimp formats is not working well Contributors: @CharlesGueunet @kevinsmia1939 @mzf-guest @jpouderoux @Meakk @mwestphal ## v1.1.1 A patch release dedicated to package managers that makes F3D v1.1 compatible with vtk v9.1.0 - Fix a render pass build issue with vtk 9.1.0 - Fix a renderer build issue with vtk 9.1.0 Contributors: @Meakk @mwestphal ## v1.1.0 New Important Features: * **Added direct scalars color rendering mode**, see doc. * **Added a turntable interactor** and made it default. The previous interactor can still be used using a dedicated option. Thanks @orangebowlerhat @filip.sund and @jjomier for your suggestions. * **Added animation support** for glTF and Exodus files. Press space for playing the animation. * Added animation related option, --animation-index, only for glTF when using the full scene. New Readers and format compatibility features: * Added skinning and morphing support with glTF files. * Added TIFF format support. Thanks @proudot for your suggestion. * Added exodus format support. Thanks @gvernon for your suggestion. * Added support for OBJ with color directly inside of it instead of using a .mtl file. Thanks @Chenge321 for your suggestion. Quality of life features: * Added a hotkey (UP) to reload current file, thanks @caioaao. * Improved Alpha blending performance, thanks @paul.lafoix. * Changed the progress bar to a more nice looking one and made it appears only if loading takes time. Thanks @finetjul for the suggestion. * Improved logging mechanism with color on all OS and a dedicated output window on windows. * Added a warning when using RayTracing but it is not available. Fixes: * Fixed an issue with skybox and edges. * Fixed a crash when an array had no name. * Fixed a window naming issue on OSX. * Fixed a symlink issue. * Fixed a coloring issue with dataset containing only cell data. Packaging: * Upgraded the AUR f3d package to 1.1.0 : https://aur.archlinux.org/packages/f3d. * Added a Brew f3d 1.1.0 package : https://formulae.brew.sh/formula/f3d. * FreeBSD now contains a f3d 1.1.0 package, thanks to yuri@freebsd.org. * NixOS now contains a f3d package, 1.1.0 should come soon, thanks to bcdarwin@gmail.com. How to support F3D: * Use the software. * Share it with anyone interested. * Star us on github: https://github.com/kitware/F3D. Note: Binaries have no raytracing support. Contributors: @Meakk @mwestphal ## v1.0.1 - VisualStudio Runtime is now included into the windows release - Ensure VTK compatibility - Improve STL binary reader performances - Fix default configuration issues - Add support for Window icon on all OSes Note: Binaries have no raytracing support. Contributors: @Meakk @mwestphal ## v1.0.0 - Documentation - Online documentation based on Hexo (https://kitware.github.io/F3D/) - Rendering - Add volume rendering for 3D images - HDRI support (skyboxes, HDR files, Filmic tone mapping) - Point sprites for displaying point clouds - Color map customization (default one changed to ‚Äúinferno‚Äù) - Interface - Drag&Drop files support - Supports opening of several files (or folder), use left/right arrow to navigate - Scalars field handling improvements - Cheat Sheet - Interactive hotkeys have been reworked - File association on Windows and OSX - Fullscreen mode - No background mode (useful when saving image to a PNG file with alpha channel) - Command line - Camera configuration - Metadata (field data) display - File name display - No render mode (useful to read information in the file) - Shell completion (supports bash, zsh, fish) - New readers - CityGML - PTS - Packages - Default config provide Note: Binaries have no raytracing support. Contributors: @Meakk @mwestphal @hlngrandmontagne Paul Lafoix ## v0.1.1 - Fixes `--version` and `--help` crash Contributors: @Meakk @mwestphal @jpouderoux ## v0.1.0 First release! Contributors: @Meakk @mwestphal @jpouderoux ",
    "url": "/pages/study-game-engines/f3d/doc/CHANGELOG.html",
    
    "relUrl": "/doc/CHANGELOG.html"
  },"5": {
    "doc": "Gallery",
    "title": "Gallery",
    "content": "# Gallery Examples renderings with their associated command lines. Images and videos displayed below use public datasets, you can download them [here](https://drive.google.com/file/d/1iRh0OeJjMjjaBDLG6b_iJSkC_Jt_YQuo/view?usp=sharing). *Animated realistic rendering*: `f3d gearbox/scene.gltf --hdri-file=future_parking_2k.hdr --hdri-skybox --hdri-ambient -uqxtgas` *Animated, skinned and morphed rendering*: `f3d dota/scene.gltf --hdri-skybox --hdri-ambient --hdri-file=future_parking_2k.hdr -uqxtgas` *Animated scientific visualization rendering*: `f3d can.ex2 -xtgans --up=+Z --scalars=VEL` *Direct scalars rendering of a point cloud*: `f3d Carola_PointCloud.ply --point-size=0 --comp=-2 -so --up=+Z --hdri-skybox --hdri-ambient --hdri-file=venice_sunset_8k.hdr` *Raytraced CAD assembly*: `f3d 202.vtp -xtgans -rd --samples=10 --range=-2,9` *Volume rendering of a security bag scan*: `f3d backpack.vti -vmn --range=300,1000 --colormap=0,0,0,0,1,1,1,1` *Realistic rendering #1*: `f3d DamagedHelmet.glb --hdri-skybox --hdri-ambient --hdri-file=lebombo_4k.hdr -tuqap` *Showcase of interactive widgets*: `f3d dragon.vtu -xtganse --comp=0` *Metallic Rendering of a STEP file*: `f3d eta_asm.stp ‚Äìhdri=future_parking_2k.hdr -uqxtga ‚Äìup=+Z ‚Äìmetallic=1 ‚Äìroughness=0.6 ‚Äìcolor=0.98,0.90,0.59` *Rendering of a FBX file*: `f3d zeldaPosed001.fbx ‚Äìhdri=hikers_cave_2k.hdr -uqxtga` *Realistic rendering #2*: `f3d FlightHelmet.glb --hdri-skybox --hdri-ambient --hdri-file=lebombo_4k.hdr -tuqap` *Visualization of a CFD velocity field*: `f3d single-pin.vtp -xtbgans --range=-2,8 --colormap=0,0.3,0.7,0,0.7,0,0.1,1,1,0.8,0.8,0` *Volume rendering of a medical skull scan*: `f3d skull.vti -vxbt --range=40,200` *Point cloud rendering using sprites*: `f3d pointCloud.vtp -o --point-size=0.2 --colormap=0,0,0.8,0,0.4,0.9,0,0,0.8,0.9,0.9,0,1,0.5,0.5,1` ## Acknowledgments - Bristleback DOTA Fan-Art by [Nikolay_Tsys](https://sketchfab.com/Tolst). - SY Carola (point cloud) by [Scottish Maritime Museum](https://sketchfab.com/ScottishMaritimeMuseum) - Gearbox Animation by [DZHUSI √òNE](https://sketchfab.com/dzhusione) - Watch movement by [Greg Brown](https://grabcad.com/greg.brown) - Zelda - Breath Of The Wild by [theStoff](https://sketchfab.com/theStoff) - Venice Sunset HDRI and Hiker‚Äôs Cave HDRI by [Greg Zaal](https://polyhaven.com/hdris?a=Greg%20Zaal) - Future Parking HDRI by [Sergej Majboroda](https://polyhaven.com/hdris?a=Sergej%20Majboroda) ",
    "url": "/pages/study-game-engines/f3d/doc/GALLERY.html",
    
    "relUrl": "/doc/GALLERY.html"
  },"6": {
    "doc": "Third Party Licenses",
    "title": "Third Party Licenses",
    "content": "# Third Party Copyrights and License within F3D application source ## cxxopts.hpp: ``` Copyright (c) 2014, 2015, 2016, 2017 Jarryd Beck Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ``` ## json.hpp: ``` __ _____ _____ _____ __| __| | JSON for Modern C++ | |__ | | | version 3.10.5 |_____|_____|_____|_|___| https://github.com/nlohmann/json Licensed under the MIT License . SPDX-License-Identifier: MIT Copyright (c) 2013-2022 Niels Lohmann . Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. ``` ",
    "url": "/pages/study-game-engines/f3d/doc/THIRD_PARTY_LICENSES.html",
    
    "relUrl": "/doc/THIRD_PARTY_LICENSES.html"
  },"7": {
    "doc": "Build",
    "title": "Build",
    "content": "# Build guide F3D uses a CMake based build system, so building F3D just requires installing needed dependencies, configuring and building. If you are not used to such processes please take a look at our [getting started guide](/pages/study-game-engines/f3d/doc/dev/GETTING_STARTED.html). ## Dependencies * [CMake](https://cmake.org) >= 3.1. * [VTK](https://vtk.org) >= 9.0.0 (9.2.6 recommended). * A C++17 compiler. * A CMake-compatible build system (Visual Studio, XCode, Ninja, Make, etc.). * Optionally, [Assimp](https://www.assimp.org/) >= 5.0. * Optionally, Open CASCADE [OCCT](https://dev.opencascade.org/) >= 7.5.2. * Optionally, [Alembic](http://www.alembic.io/) >= 1.7. * Optionally, [Draco](https://google.github.io/draco/) >= 1.5. * Optionally, [Python](https://www.python.org/) >= 3.6 and [pybind11](https://github.com/pybind/pybind11) >= 2.2. * Optionally, [Java](https://www.java.com) >= 18. * Optionally, [OpenEXR](https://openexr.com/en/latest/) >= 3.0. ## VTK compatibility As stated in the dependencies, F3D is compatible with VTK >= 9.0.0, however, many features are only available in certain conditions. We suggest using VTK 9.2.6 with RenderingRayTracing, RenderingExternal and IOExodus modules enabled in order to get as many features as possible in F3D. ## Configuration and building Configure and generate the project with CMake, then build the software using your build system. Here is some CMake options of interest: * `F3D_BUILD_APPLICATION`: Build the F3D executable. * `BUILD_TESTING`: Enable the [tests](/pages/study-game-engines/f3d/doc/dev/TESTING.html). * `F3D_MACOS_BUNDLE`: On macOS, build a `.app` bundle. * `F3D_WINDOWS_GUI`: On Windows, build a Win32 application (without console). * `F3D_WINDOWS_BUILD_SHELL_THUMBNAILS_EXTENSION`: On Windows, build the shell thumbnails extension. * `F3D_PLUGINS_STATIC_BUILD`: Build all plugins as static library (embedded into `libf3d`) and automatically loaded by the application. Incompatible with `F3D_MACOS_BUNDLE`. Some modules, plugins and bindings depending on external libraries can be optionally enabled with the following CMake variables: * `F3D_MODULE_RAYTRACING`: Support for raytracing rendering. Requires that VTK has been built with `OSPRay` and `VTK_MODULE_ENABLE_VTK_RenderingRayTracing` turned on. Disabled by default. * `F3D_MODULE_EXTERNAL_RENDERING`: Support for external render window. Requires that VTK has been built with `VTK_MODULE_ENABLE_VTK_RenderingExternal` turned on. Disabled by default. * `F3D_MODULE_EXR`: Support for OpenEXR images. Requires `OpenEXR`. Disabled by default. * `F3D_PLUGIN_BUILD_EXODUS`: Support for ExodusII (.ex2) file format. Requires that VTK has been built with `IOExodus` module (and `hdf5`). Enabled by default. * `F3D_PLUGIN_BUILD_OCCT`: Support for STEP and IGES file formats. Requires `OpenCASCADE`. Disabled by default. * `F3D_PLUGIN_BUILD_ASSIMP`: Support for FBX, DAE, OFF and DXF file formats. Requires `Assimp`. Disabled by default. * `F3D_PLUGIN_BUILD_ALEMBIC`: Support for ABC file format. Requires `Alembic`. Disabled by default. * `F3D_PLUGIN_BUILD_DRACO`: Support for DRC file format. Requires `Draco`. Disabled by default. * `F3D_BINDINGS_PYTHON`: Generate python bindings (requires `Python` and `pybind11`). Disabled by default. * `F3D_BINDINGS_JAVA`: Generate java bindings (requires `Java` and `JNI`). Disabled by default. ## VCPKG It's possible to use VCPKG to automatically build dependencies. A manifest file `vcpkg.json` is available at your convenience. Please read [VCPKG documentation](https://vcpkg.io/en/getting-started.html). Basically, just install VCPKG, and configure F3D using `-DCMAKE_TOOLCHAIN_FILE=[path to vcpkg]/scripts/buildsystems/vcpkg.cmake` option. ## Installing Installation can be done through CMake, by running the following command: ``` cmake --install ${your_build_dir} ``` Individual components can also be installed by specifying the component name: ``` cmake --install ${your_build_dir} --component ${component_name} ``` Here is the list of all the components: Name|Installed by default|Operating system|Description ------|------|------|------ `application`|YES|ALL|F3D application `configuration`|NO|ALL|Default configuration files, `config` and `thumbnail`. `library`|YES|ALL|libf3d library binaries `plugin`|YES|ALL|libf3d plugins `dependencies`|NO|ALL|libf3d runtime dependencies. Can be used to create a self-contained and relocatable package. System libraries are excluded. `sdk`|NO|ALL|libf3d SDK (headers and CMake config files) `licenses`|YES|ALL|F3D and third party licenses `documentation`|YES|Linux|`man` documentation `shellext`|YES|Windows/Linux|Desktop integration `python`|YES|ALL|Python bindings `java`|YES|ALL|Java bindings `mimetypes`|NO|Linux|Plugins mimetype XML files for integration with Freedesktop `assets`|YES|Linux|Assets for integration with Freedesktop ",
    "url": "/pages/study-game-engines/f3d/doc/dev/BUILD.html",
    
    "relUrl": "/doc/dev/BUILD.html"
  },"8": {
    "doc": "Coding Style",
    "title": "Coding Style",
    "content": "# Coding Style F3D use different coding styles in each component, however there are some common rules ## Common rules Overall syntax: - CamelCase. - Avoid using `using` for namespaces. - Initialize variables in header when possible. - Local variables starts with a lower case char. - Class members starts with a upper case char. - Indents are two spaces. - One space between instruction and parenthesis. - Always add curly brace after instruction. - Curly brace one a new line, aligned with instruction. - Add `//----------------------------------------------------------------------------` before any method in implementation. Example: ```cpp //---------------------------------------------------------------------------- void class::method() { if (condition) { std::vector myIntVector = { 13 }; } } ``` Includes: - Organized by category: `F3DApplication`, `libf3d`, `VTKExtensions`, `other deps`, `std`, `system`. - Sorted inside category. ## F3D Application rules - Class starts with `F3D` - Method starts with an uppercase char. ## libf3d rules - Class starts with a lower case char. - Method starts with an lower case char. ## VTKExtensions rules - Follow VTK rules - Method starts with an uppercase char. - Class starts with `vtkF3D` if inheriting from vtkObject. - Class starts with `F3D` if not inheriting from vtkObject. ",
    "url": "/pages/study-game-engines/f3d/doc/dev/CODING_STYLE.html",
    
    "relUrl": "/doc/dev/CODING_STYLE.html"
  },"9": {
    "doc": "Generate",
    "title": "Generate",
    "content": "# How to generate the full coverage report Requires `gcovr` program and `gcc` toolchain. 1. Build with `F3D_COVERAGE` option enabled. 2. Run all tests. 3. Generate the report with: `gcovr -r /path/to/sources --html --html-details -o coverage.html`. # How to build and test with sanitizer Requires `clang` toolchain. 1. Build with `F3D_SANITIZER` option to any of the possible values. 2. `export LSAN_OPTIONS=suppressions=/path/to/f3d/.lsan.supp:use_tls=0`. 3. `export TSAN_OPTIONS=suppressions=/path/to/f3d/.tsan.supp`. 4. Run all tests. # How to locally generate the jekyll based website 1. Install `ruby` and make sure ruby binaries directory is added to your `PATH` 2. Install jekyll and all dependencies: `gem install jekyll jekyll-remote-theme jekyll-relative-links jekyll-seo-tag jekyll-optional-front-matter jekyll-titles-from-headings` 3. Run jekyll locally: `jekyll server` 4. Open http://127.0.0.1:4000/ in a browser Please note the favicon and search bar are not working locally, this is expected. # How to locally generate the doxygen documentation 1. Install Python, pip and doxygen 2. `pip install sphinx sphinx-book-theme exhale` 3. `sphinx-build -M html ./library/doxygen /path/to/build` 4. `/path/to/build` directory now contains a html website ",
    "url": "/pages/study-game-engines/f3d/doc/dev/GENERATE.html",
    
    "relUrl": "/doc/dev/GENERATE.html"
  },"10": {
    "doc": "Getting Started",
    "title": "Getting Started",
    "content": "# Getting started guide This is a getting started guide, aimed to people that are not used to C++ programming, configuring and compiling. If you are already used to such processes, you may be looking for our [build guide](/pages/study-game-engines/f3d/doc/dev/BUILD.html). This guide will help you to compile your own version of F3D with required dependencies. Optional dependencies or covered in the build guide. - If you are using [Linux](#linux) - If you are using [Windows](#windows) - If you are using [macOS](#macos) ## Linux Note: The following steps were tested with Ubuntu 22 and ArchLinux but should work for other OSes as stated, as long as listed packages are available. ### Install dependencies First make sure your system is up-to-date, then install the required dependencies using the terminal. #### Debian/Ubuntu/Mint ``` sudo apt install build-essential git git-lfs cmake libvtk9-dev ``` #### Fedora/Centos/RedHat ``` sudo yum install make automake gcc gcc-c++ kernel-devel git git-lfs cmake vtk ``` #### Arch Linux ``` sudo pacman -S base-devel git git-lfs cmake vtk ``` ### Compile F3D Open a terminal. ``` mkdir f3d cd f3d git clone https://github.com/f3d-app/f3d src mkdir build cd build cmake ../src make ``` You can then simply run F3D from the command line: ``` ./bin/f3d ``` ## Windows Note: The following steps were tested with Visual Studio Community 2022 using Windows 10, but should also work for other versions #### Install Dependencies * Download and install [git bash for windows][gitforwindows] * Download and install [cmake][cmake-download] * Download and install [Visual Studio 2022 Community Edition][visual-studio] #### Recover F3D sources * Open git bash ```sh cd C: mkdir dev cd dev mkdir f3d cd f3d git clone https://github.com/f3d-app/f3d.git src mkdir build ``` #### Install dependencies using vcpkg * Open git bash ```sh cd C:/dev git clone https://github.com/Microsoft/vcpkg.git ``` * Open cmd ```sh cd C:\\dev ./vcpkg/bootstrap-vcpkg.sh cmake -B ./f3d/build -S ./f3d/src -DCMAKE_TOOLCHAIN_FILE=./vcpkg/scripts/buildsystems/vcpkg.cmake ``` Note: Last command will take a while. It download, compile and install all dependencies, including many optional ones. #### Build F3D * Open cmd ```sh cd C:\\dev\\f3d\\build cmake . cmake --build . ``` #### Run * Double click on the `C:\\dev\\f3d\\build\\bin_Debug\\f3d.exe` executable ## macOS Note: The following steps were tested with macOS Catalina using Xcode 12.4, but should also work for other versions ### Install Xcode There are different ways to install Xcode, you can use the AppStore or download it from apple developer website and then extract and install it. ### Install Homebrew Open a terminal. ``` /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" (echo; echo 'eval \"$(/opt/homebrew/bin/brew shellenv)\"') >> ~/.zprofile eval \"$(/opt/homebrew/bin/brew shellenv)\" ``` ### Install dependencies Open a terminal. ``` brew install git git-lfs cmake curl vtk git lfs install ``` Note: Homebrew is downloading, compiling and installing all vtk dependencies. This command may take a very long time. ### Compile F3D Open a terminal. ``` mkdir f3d cd f3d git clone https://github.com/f3d-app/f3d src mkdir build cd build cmake ../src make ``` You can then simply run F3D from the command line: ``` ./bin/f3d.app/Contents/MacOS/f3d ``` [cmake-download]: https://cmake.org/download [gitforwindows]: https://gitforwindows.org/ [visual-studio]: https://visualstudio.microsoft.com/vs/community/ ",
    "url": "/pages/study-game-engines/f3d/doc/dev/GETTING_STARTED.html",
    
    "relUrl": "/doc/dev/GETTING_STARTED.html"
  },"11": {
    "doc": "Developer Documentation",
    "title": "Developer Documentation",
    "content": "# Developer Documentation - [How to get started with building F3D.](/pages/study-game-engines/f3d/doc/dev/GETTING_STARTED.html) - [How to build F3D.](/pages/study-game-engines/f3d/doc/dev/BUILD.html) - [How to test F3D.](/pages/study-game-engines/f3d/doc/dev/TESTING.html) - [How to contribute to F3D.](/pages/study-game-engines/f3d/CONTRIBUTING.html) - [How to Generate coverage and sanitizer report.](/pages/study-game-engines/f3d/doc/dev/GENERATE.html) - [Coding Style.](/pages/study-game-engines/f3d/doc/dev/CODING_STYLE.html) ",
    "url": "/pages/study-game-engines/f3d/doc/dev/README_DEV.html",
    
    "relUrl": "/doc/dev/README_DEV.html"
  },"12": {
    "doc": "Testing",
    "title": "Testing",
    "content": "# Testing F3D has an expansive suite of tests, you may want to run them locally, either to validate your build or because you are contributing to F3D and want to add/modify a test. ## CMake Options There is a few CMake options to F3D testing configuration: * `BUILD_TESTING`: Enable the tests, off by default. * `F3D_TESTING_ENABLE_RENDERING_TESTS`: An option to enable/disable test that require rendering capabilities, on by default. * `F3D_TESTING_ENABLE_LONG_TIMEOUT_TESTS`: Certain tests can take some time to run, off by default, requires rendering tests. * `F3D_TESTING_DISABLE_DEFAULT_LIGHTS_TESTS_COMPARISON`: With VTK /testing` for examples to follow. ### VTKExtensions layer When for some reason adding a test in the application or library layer is not possible, it is possible to add a C++ test in the VTKExtensions layer. These tests are simple C++ methods that should return `EXIT_SUCESS` or `EXIT_FAILURE`. Everything is handled in `library/VTKExtensions/ModuleName/Testing`. To add a test, first identify which VTKExtensions module you need to add a test into, then create a new `TestName.cxx` file containing a `int TestName(int argc, char* argv[])` method, then implement your test in C++ using VTK and F3D VTKExtensions modules. Then add you new file to `library/VTKExtensions/ModuleName/Testing/CMakeLists.txt`. It is supported to read file as input if needed, see other tests as examples. ",
    "url": "/pages/study-game-engines/f3d/doc/dev/TESTING.html",
    
    "relUrl": "/doc/dev/TESTING.html"
  },"13": {
    "doc": "Bindings",
    "title": "Bindings",
    "content": "# Bindings ## Python If the python bindings have been generated using the `F3D_BINDINGS_PYTHON` CMake option, the libf3d can be used directly from python. Make sure to set `PYTHONPATH` to path where the python module is built. Here is an example showing how to use libf3d python bindings: ```python import f3d eng = f3d.Engine(f3d.Window.NATIVE) eng.options.update({ \"model.scivis.array-name\": \"Normals\", \"model.scivis.component\": 0, \"ui.bar\": True, \"render.grid.enable\": True, }) eng.loader.load_geometry(\"f3d/testing/data/dragon.vtu\") eng.interactor.start() ``` ## Java (experimental) If the Java bindings have been generated using the `F3D_BINDINGS_JAVA` CMake option, the libf3d can be used directly from Java. You can import the `f3d.jar` package and use the provided Java classes directly. Make sure to set `java.library.path` to the path where the JNI library is built. Here is an example showing how to use libf3d Java bindings: ```java import app.f3d.F3D.*; public class F3DExample { public static void main(String[] args) { Engine.autoloadPlugins(); // Always use try-with-resources idiom to ensure the native engine is released try (Engine engine = new Engine(Window.Type.NATIVE)) { Loader loader = engine.getLoader(); loader.loadGeometry(\"f3d/testing/data/dragon.vtu\"); engine.getWindow().render(); } } } ``` ## Javascript (experimental) If the Javascript bindings have been generated by building F3D with webassembly and emscriptem, the libf3d can be used directly from a browser. ``` ",
    "url": "/pages/study-game-engines/f3d/doc/libf3d/BINDINGS.html",
    
    "relUrl": "/doc/libf3d/BINDINGS.html"
  },"14": {
    "doc": "Classes Introduction",
    "title": "Classes Introduction",
    "content": "# Classes Introduction This is only an introduction to libf3d classes. For the complete documentation, please consult the [libf3d doxygen documentation.](https://f3d.app/doc/libf3d/doxygen/). ## Engine class The engine class is the main class that needs to be instantiated. All other classes instance are provided by the engine using getters, `getLoader`, `getWindow`, `getInteractor`, `getOptions`. The engine constructor lets you choose the type of window in its constructor, `NONE`, `NATIVE`, `NATIVE_OFFSCREEN`, `EXTERNAL`. Default is `NATIVE`. See [Window class](#window-class) documentation for more info. Please note that the engine will not provide a interactor with `NONE` and `EXTERNAL`. A static function `loadPlugin` can also be called to load reader plugins. It must be called before loading any file. An internal plugin containing VTK native readers can be loaded by calling `f3d::engine::loadPlugin(\"native\");`. Other plugins maintained by F3D team are available if their build is enabled: `alembic`, `assimp`, `draco`, `exodus` and `occt`. If CMake option `F3D_PLUGINS_STATIC_BUILD` is enabled, the plugins listed above are also static just like `native` plugin. All static plugins can be loaded using `f3d::engine::autoloadPlugins()`. ## Loader class The loader class is responsible to read and load the file from the disk. It supports reading full scene files as well as multiple geometries into a default scene. ## Window class The window class is responsible for rendering the meshes. It supports multiple modes. * `NONE`: A window that will not render anything, very practical when only trying to recover meta-information about the data. * `NATIVE`: Default mode where a window is shown onscreen using native graphical capabilities. * `NATIVE_OFFSCREEN`: Use native graphical capabilities for rendering, but unto an offscreen window, which will not appear on screen, practical when generating screenshots. * `EXTERNAL`: A window where the OpenGL context is not created but assumed to have been created externally. To be used with other frameworks like Qt or GLFW. Window lets you `render`, `renderToImage` and control other parameters of the window, like icon or windowName. ## Interactor class When provided by the engine, the interactor class lets you choose how to interact with the data. It contains the animation API to start and stop animation. Interactor also lets you set your interaction callbacks in order to modify how the interaction with the data is done. Of course, you can use `start` and `stop` to control the interactor behavior. ## Camera class Provided by the window, this class lets you control the camera. You can either specify the camera position, target, and up direction directly, or specify movements relative to the current camera state. ## Image class A generic image class that can either be created from a window, from an image filepath or even from a data buffer. It supports comparison making it very practical in testing context. ## Log class A class to control logging in the libf3d. Simple using the different dedicated methods (`print`, `debug`, `info`, `warn`, `error`) and `setVerboseLevel`, you can easily control what to display. Please note that, on windows, a dedicated output window may be created. ## Options class This class lets you control the behavior of the libf3d. An option is basically a string used as a key associated with a value, see the exhaustive [list](/pages/study-game-engines/f3d/doc/libf3d/OPTIONS.html). ## Reader class This class is used internally by the [plugin SDK](/pages/study-game-engines/f3d/doc/libf3d/PLUGINS.html) and is not intended to be used directly. ## Plugin class This class is used internally by the [plugin SDK](/pages/study-game-engines/f3d/doc/libf3d/PLUGINS.html) and is not intended to be used directly. ",
    "url": "/pages/study-game-engines/f3d/doc/libf3d/CLASSES.html",
    
    "relUrl": "/doc/libf3d/CLASSES.html"
  },"15": {
    "doc": "Options",
    "title": "Options",
    "content": "# Options exhaustive list An option is a string used as a key associated with a value, which are stored in an `options` instance. The possible option are listed below and are organized by categories and subcategories, here is a non-exhaustive explanation of the categories. * `scene` options are related to how the scene is being displayed * `render` options are related to the way the render is done * `render.effect` options are related to specific techniques used that modify the render * `ui` options are related to the screenspace UI element displayed * `model` options are related to modifications on the model, they are only meaningful when using the default scene * `interactor` options requires an interactor to be present to have any effect. Please note certain options are taken into account when rendering, others when loading a file. See the exhaustive list below, but note that this may change in the future. ## Scene Options Option|TypeDefaultTrigger|Description|F3D option :---:|:---:|:---|:---: scene.animation.index|int0load|Select the animation to load.Any negative value means all animations (glTF only).The default scene always has at most one animation.|\\-\\-animation-index scene.animation.speed-factor|double1render|Set the animation speed factor to slow, speed up or even invert animation.|\\-\\-animation-speed-factor scene.animation.frame-rate|double60render|Set the animation frame rate used to play the animation interactively.|\\-\\-animation-frame-rate scene.camera.index|int-1load|Select the scene camera to use when available in the file.Any negative value means automatic camera.The default scene always uses automatic camera.|\\-\\-camera-index scene.up-direction|string+Yload|Define the Up direction|\\-\\-up ## Interactor Options Option|TypeDefaultTrigger|Description|F3D option :---:|:---:|:---|:---: interactor.axis|boolfalserender|Show *axes* as a trihedron in the scene.|\\-\\-axis interactor.trackball|boolfalserender|Enable trackball interaction.|\\-\\-trackball ## Model Options Option|TypeDefaultTrigger|Description|F3D option :---:|:---:|:---|:---: model.matcap.texture|string-render|Path to a texture file containing a material capture. All other model options for surfaces are ignored if this is set.|\\-\\-texture-matcap model.color.opacity|double1.0render|Set *opacity* on the geometry. Usually used with Depth Peeling option. Multiplied with the `model.color.texture` when present.|\\-\\-opacity model.color.rgb|vector\\1.0,1.0,1.0render|Set a *color* on the geometry. Multiplied with the `model.color.texture` when present.|\\-\\-color model.color.texture|string-render|Path to a texture file that sets the color of the object. Will be multiplied with rgb and opacity.|\\-\\-texture-base-color model.emissive.factor|vector\\1.0,1.0,1.0render| Multiply the emissive color when an emissive texture is present.|\\-\\-emissive-factor model.emissive.texture|string-render|Path to a texture file that sets the emitted light of the object. Multiplied with the `model.emissive.factor`.|\\-\\-texture-emissive model.material.metallic|double0.0render|Set the *metallic coefficient* on the geometry (0.0-1.0). Multiplied with the `model.material.texture` when present.|\\-\\-metallic model.material.roughness|double0.3render|Set the *roughness coefficient* on the geometry (0.0-1.0). Multiplied with the `model.material.texture` when present.|\\-\\-roughness model.material.texture|string-render|Path to a texture file that sets the Occlusion, Roughness and Metallic values of the object. Multiplied with the `model.material.roughness` and `model.material.metallic`, set both of them to 1.0 to get a true result.|\\-\\-texture-material model.normal.scale|double1.0render|Normal scale affects the strength of the normal deviation from the normal texture.|\\-\\-normal-scale model.normal.texture|string-render|Path to a texture file that sets the normal map of the object.|\\-\\-texture-normal model.scivis.cells|boolfalserender|Color the data with value found *on the cells* instead of points|\\-\\-cells model.scivis.colormap|vector\\\\render|Set a *custom colormap for the coloring*.This is a list of colors in the format `val1,red1,green1,blue1,...,valN,redN,greenN,blueN`where all values are in the range (0,1).|\\-\\-colormap model.scivis.component|int-1render|Specify the component to color with. -1 means *magnitude*. -2 means *direct values*.|\\-\\-comp model.scivis.array-name|string\\render|*Color by a specific data array* present in on the data. Set to to let libf3d find the first available array.|\\-\\-scalars model.scivis.range|vector\\-render|Set a *custom range for the coloring*.|\\-\\-range model.point-sprites.enable|boolfalserender|Show sphere *points sprites* instead of the geometry.|\\-\\-point-sprites model.volume.enable|boolfalserender|Enable *volume rendering*. It is only available for 3D image data (vti, dcm, nrrd, mhd files) and will display nothing with other default scene formats.|\\-\\-volume model.volume.inverse|boolfalserender|Inverse the linear opacity function.|\\-\\-inverse ## Render Options Option|TypeDefaultTrigger|Description|F3D option :---:|:---:|:---|:---: render.effect.translucency-support|boolfalserender|Enable *translucency support*. This is a technique used to correctly render translucent objects, implemented using depth peeling|\\-\\-translucency-support render.effect.anti-aliasing|boolfalserender|Enable *anti-aliasing*. This technique is used to reduce aliasing, implemented using FXAA.|\\-\\-anti-aliasing render.effect.ambient-occlusion|boolfalserender|Enable *ambient occlusion*. This is a technique providing approximate shadows, used to improve the depth perception of the object. Implemented using SSAO|\\-\\-ambient-occlusion render.effect.tone-mapping|boolfalserender|Enable generic filmic *Tone Mapping Pass*. This technique is used to map colors properly to the monitor colors.|\\-\\-tone-mapping render.line-width|double1.0render|Set the *width* of lines when showing edges.|\\-\\-line-width render.show-edges|boolfalserender|Show the *cell edges*|\\-\\-edges render.point-size|double10.0render|Set the *size* of points when showing vertices and point sprites.|\\-\\-point-size render.grid.enable|boolfalserender|Show *a grid* aligned with the horizontal (orthogonal to the Up direction) plane.|\\-\\-grid render.grid.absolute|boolfalserender|Position the grid at the *absolute origin* of the model's coordinate system instead of below the model.|\\-\\-grid render.grid.unit|double0render|Set the size of the *unit square* for the grid. If set to non-positive (the default) a suitable value will be automatically computed.|\\-\\-grid\\-unit render.grid.subdivisions|int10render|Set the number of subdivisions for the grid.|\\-\\-grid\\-subdivisions render.raytracing.enable|boolfalserender|Enable *raytracing*. Requires the raytracing module to be enabled.|\\-\\-raytracing render.raytracing.samples|int5render|The number of *samples per pixel*.|\\-\\-samples render.raytracing.denoise|boolfalserender|*Denoise* the raytracing rendering.|\\-\\-denoise render.hdri.file|string-render|Set the *HDRI* image that can be used for ambient lighting and skybox.Valid file format are hdr, exr, png, jpg, pnm, tiff, bmp.If not set, a default is provided.|\\-\\-hdri-file render.hdri.ambient|boolfalserender|Light the scene using the *HDRI* image as ambient lightingThe environment act as a light source and is reflected on the material.|\\-\\-hdri-ambient render.background.color|vector\\0.2,0.2,0.2render|Set the window *background color*.Ignored if a *hdri* skybox is used.|\\-\\-bg-color render.background.skybox|boolfalserender|Show the *HDRI* image as a skyboxOverrides the the background color if any|\\-\\-hdri-skybox render.background.blur|boolfalserender|Blur background, useful with a skybox.|\\-\\-blur-background render.background.blur.coc|double20.0render|Blur background circle of confusion radius.|\\-\\-blur-background-coc ## UI Options Option|TypeDefaultTrigger|Description|F3D option :---:|:---:|:---|:---: ui.bar|boolfalserender|Show *scalar bar* of the coloring by data array.|\\-\\-bar ui.cheatsheet|boolfalserender|Show a interactor cheatsheet ui.filename|boolfalserender|Display the *filename info content* on top of the window.|\\-\\-filename ui.filename-info|string-render|Content of *filename info* to display. ui.font-file|string-render|Use the provided FreeType compatible font file to display text.Can be useful to display non-ASCII filenames.|\\-\\-font-file ui.fps|boolfalserender|Display a *frame per second counter*.|\\-\\-fps ui.loader-progress|boolfalseload|Show a *progress bar* when loading the file.|\\-\\-progress ui.metadata|boolfalserender|Display the *metadata*.|\\-\\-metadata ui.dropzone|boolfalserender|Show a drop zone. ui.dropzone-info|string-render|Content of the drop zone text to display. ",
    "url": "/pages/study-game-engines/f3d/doc/libf3d/OPTIONS.html",
    
    "relUrl": "/doc/libf3d/OPTIONS.html"
  },"16": {
    "doc": "Overview",
    "title": "Overview",
    "content": "# libf3d - A library to render 3D meshes By Michael Migliore and Mathieu Westphal. libf3d is a BSD-licensed C++ library to open and render 3D meshes. It is of course used by F3D. libf3d API is simple and easy to learn. Python bindings are provided through pybind11. Java bindings are also available. libf3d API is still in alpha version and may change drastically in the future. ## Getting Started Rendering a full scene file and starting the interaction is very easy: ```cpp #include #include #include // Load VTK native readers f3d::engine::autoloadPlugins(); // Create a f3d::engine f3d::engine eng(); // Load a scene eng.getLoader().loadScene(\"path/to/file.ext\"); // Start rendering and interacting eng.getInteractor().start(); ``` As well as loading multiple geometries into a default scene: ```cpp #include #include #include // Load VTK native readers f3d::engine::autoloadPlugins(); // Create a f3d::engine f3d::engine eng(); // Load multiples geometries eng.getLoader().loadGeometry(\"path/to/file.ext\").loadGeometry(\"path/to/file2.ext\"); // Start rendering and interacting eng.getInteractor().start(); ``` It's also possible to load a geometry from memory buffers: ```cpp #include #include #include // Create a f3d::engine f3d::engine eng(); // Create a single triangle f3d::mesh_t mesh = {}; mesh.points = { 0.f, 0.f, 0.f, 0.f, 1.f, 0.f, 1.f, 0.f, 0.f }; mesh.face_sides = { 3 }; mesh.face_indices = { 0, 1, 2 }; eng.getLoader().loadGeometry(mesh); // Start rendering and interacting eng.getInteractor().start(); ``` Manipulating the window directly can be done this way: ```cpp #include #include #include #include // Load VTK native readers f3d::engine::autoloadPlugins(); // Create a f3d::engine f3d::engine eng(f3d::window::Type::NATIVE_OFFSCREEN); // Load a geometry eng.getLoader().loadGeometry(\"path/to/file.ext\"); // Set the window size and render to an image f3d::image img = eng.getWindow().setSize(300, 300).renderToImage(); // Save the image to a file img.save(\"/path/to/img.png\"); ``` Changing some options can be done this way: ```cpp #include #include #include #include // Load VTK native readers f3d::engine::autoloadPlugins(); // Create a f3d::engine f3d::engine eng(); // Recover the options and set the wanted value eng.getOptions() .set(\"render.effect.ambient-occlusion\", true) .set(\"render.effect.anti-aliasing\", true); // Standard libf3d usage eng.getLoader().loadGeometry(\"path/to/file.ext\"); eng.getInteractor().start(); ``` Most options are dynamic, some are only taken into account when loading a file. See the [options](/pages/study-game-engines/f3d/doc/libf3d/OPTIONS.html) documentation. Find more examples in the [examples directory](https://github.com/f3d-app/f3d/tree/master/examples), you can also find other usages in the [testing directory](https://github.com/f3d-app/f3d/tree/master/library/testing). For the complete documentation, please consult the [libf3d doxygen documentation.](https://f3d.app/doc/libf3d/doxygen/). ## Building against the libf3d Please follow instructions in the [F3D build guide](/pages/study-game-engines/f3d/doc/dev/BUILD.html), then use CMake to find the libf3d and link against it like this in your CMakeLists.txt: ```cmake find_package(f3d REQUIRED) [...] target_link_libraries(target f3d::libf3d) ``` ## Extending libf3d with plugins In order to add new supported file format to libf3d, you can create a plugin using CMake macros. Please follow instructions in the [F3D plugin SDK guide](/pages/study-game-engines/f3d/doc/libf3d/PLUGINS.html). ",
    "url": "/pages/study-game-engines/f3d/doc/libf3d/OVERVIEW.html",
    
    "relUrl": "/doc/libf3d/OVERVIEW.html"
  },"17": {
    "doc": "Plugin SDK",
    "title": "Plugin SDK",
    "content": "# Plugin SDK When calling `find_package(f3d)` in CMake, a few macros are made available to you to generate a plugin which allow you to extend libf3d to support your own file format. > Please consider [contributing](/pages/study-game-engines/f3d/CONTRIBUTING.html) your plugin in [F3D directly](https://github.com/f3d-app/f3d/tree/master/plugins) if you think it can be useful to the community. > You can also consider contributing directly [in VTK](https://gitlab.kitware.com/vtk/vtk/blob/master/Documentation/dev/git/develop.md). ## Creating a plugin You can take a look at the example in the [examples/plugin](https://github.com/f3d-app/f3d/tree/master/examples/plugins) directory or at the official [plugins](https://github.com/f3d-app/f3d/tree/master/plugins). The first thing (and most difficult part) you have to do is creating a VTK reader (or a VTK importer if you want to support a full scene with materials, lights and cameras), and wrap it into a VTK module. You can create several readers in the same VTK module if you need to support several file formats in a single plugin. Then, declare the reader(s) and the plugin using the CMake macros: ```cmake f3d_plugin_init() f3d_plugin_declare_reader( NAME \"ReaderName\" EXTENSIONS \"myext\" # set the extensions the reader can support MIMETYPES \"application/vnd.myext\" # set the mimetypes the reader can support VTK_READER ${vtk_classname} # set the name of the VTK class you have created DESCRIPTION \"Reader description\" # set the description of the reader EXCLUDE_FROM_THUMBNAILER # add this flag if you don't want thumbnail generation for this reader ) # More f3d_plugin_declare_reader calls are possible f3d_plugin_build( NAME \"PluginName\" VERSION 1.0 DESCRIPTION \"Plugin description\" VTK_MODULES CommonCore CommonExecutionModel # Add more VTK modules if necessary ) ``` If the build succeeds, a library called `libf3d-plugin-.so` will be created (`f3d-plugin-.dll` on Windows) A JSON file of the following form will also be generated. It's used by F3D internally to get information about supported file formats. ```json { \"description\" : \"Plugin description\", \"name\" : \"PluginName\", \"readers\" : [ { \"description\" : \"Reader description\", \"extensions\" : [ \"myext\" ], \"mimetypes\" : [ \"application/vnd.myext\" ], \"name\" : \"ReaderName\" } ], \"type\" : \"MODULE\", \"version\" : \"1.0\" } ``` The list of existing mimetypes can be find [here](https://www.iana.org/assignments/media-types/media-types.xhtml). If your file format is not listed, the mimetype should be `application/vnd.${extension}` ## Loading your plugin The plugin can be loaded using `f3d::engine::loadPlugin(\"path or name\")` api if you are using libf3d, or `--load-plugins=\"path or name\"` option if you are using F3D application. The option can also be set in a configuration file that you could distribute with your plugin. ",
    "url": "/pages/study-game-engines/f3d/doc/libf3d/PLUGINS.html",
    
    "relUrl": "/doc/libf3d/PLUGINS.html"
  },"18": {
    "doc": "libf3d Documentation",
    "title": "libf3d Documentation",
    "content": "# libf3d Documentation - [Overview of the libf3d.](/pages/study-game-engines/f3d/doc/libf3d/OVERVIEW.html) - [libf3d classes introduction.](/pages/study-game-engines/f3d/doc/libf3d/CLASSES.html) - [Exhaustive list of libf3d options.](/pages/study-game-engines/f3d/doc/libf3d/OPTIONS.html) - [How to use libf3d bindings.](/pages/study-game-engines/f3d/doc/libf3d/BINDINGS.html) - [How to create a plugin.](/pages/study-game-engines/f3d/doc/libf3d/PLUGINS.html) ",
    "url": "/pages/study-game-engines/f3d/doc/libf3d/README_LIBF3D.html",
    
    "relUrl": "/doc/libf3d/README_LIBF3D.html"
  },"19": {
    "doc": "Configuration File",
    "title": "Configuration File",
    "content": "# Configuration File Almost all the command-line options can be controlled using configuration files. Configuration files uses the \"long\" version of the command-line options in a JSON formatted file to provide values for these options. These options can be organized by block using a regular expression for each block in order to provide different default values for the different filetypes. A special block, named `global`, will apply to all files. Using a command-line option will override the corresponding value in the config file. The `global` block and command-line options are only taken into account on the first load and not on subsequent loads, when switching between files. The regular expression blocks are always taken into account, even when loading further files. Please note the regular expressions are not case-sensitive. A typical config file may look like this: ```javascript { \"global\": { \"bg-color\": \"0.7,0.7,0.7\", \"color\": \"0.5,0.1,0.1\", \"anti-aliasing\": true, \"timer\": true, \"progress\": true, \"axis\": true, \"bar\": true, \"roughness\": 0.2, \"grid\": true, \"scalars\": true }, \".*vt.\": { \"edges\": true }, \".*gl(tf|b)\": { \"raytracing\": true, \"denoise\": true, \"samples\": 3 }, \".*mhd\": { \"volume\": true } } ``` Here, the first block defines a basic global configuration with many desired options for all files. The second block specifies that all files ending with vt., eg: vtk, vtp, vtu, ... will be shown with edges visibility turned on. The third block specifies raytracing usage for .gltf and .glb files. The last block specifies that volume rendering should be used with .mhd files. Single .json file for configuration is supported, as well a config directory containing multiple .json config files. In the case of config directory, .json file are read in alphabetical order and an option in a block can be overridden by the same option being set in the same block in another .json file read after. F3D provides a default config directory for generic usage (`config.d`) and a thumbnail specific config directory (`thumbnail.d`). You can edit the file contained in these directory or copy then into specific locations (see below) in order to customize F3D behavior. The following command-line options cannot be set via config file: `help`, `version`, `readers-list`, `config`, `dry-run`. The following command-line options can only be set in the global block of the config file: `no-render`, `inputs`, `output`, `quiet`, `verbose`, `resolution`, `position` and all testing options. Boolean options that have been turned on in the configuration file can be turned off on the command line if needed, eg: `--point-sprites=false`. The configuration file or directory possible locations depends on your operating system. They are considered in the below order and only the first found will be used. * Linux: `${XDG_CONFIG_HOME}/.config/f3d/config(.json,.d)`, `~/.config/f3d/config(.json,d)`, `/etc/f3d/config(.json,.d)`, `/usr/share/f3d/configs/config(.json,.d)`, `[install_dir]/share/f3d/configs/config(.json,.d)` * Windows: `%APPDATA%\\f3d\\(config.json,.d)`, `[install_dir]\\share\\f3d\\configs\\(config.json,.d)` * macOS: `${XDG_CONFIG_HOME}/.config/f3d/config(.json,.d)`, `~/.config/f3d/config(.json,.d)`, `/usr/local/etc/f3d/config(.json,.d)`, `f3d.app/Contents/Resources/configs/config(.json,.d)` The binary release will install the default config directory. On Linux, they will be installed in `[install_dir]/share/f3d/configs/`, on Windows, they will be installed in `[install_dir]\\share\\f3d\\configs\\`, on macOS, it will be installed in the bundle. Please note there is a command line option to control the configuration file to read. Using it, one can specify an absolute/relative path for the configuration path, but also only the filename or filestem (`.json` and `.d` will be added) to look for in the locations listed above, , eg: `f3d --config=custom_config` will look for `custom_config.json` and `custom_config.d` in locations listed above. Please note only one config file or directory will be found and parsed. ",
    "url": "/pages/study-game-engines/f3d/doc/user/CONFIGURATION_FILE.html",
    
    "relUrl": "/doc/user/CONFIGURATION_FILE.html"
  },"20": {
    "doc": "Desktop Integration",
    "title": "Desktop Integration",
    "content": "# Desktop Integration F3D can be integrated in the desktop experience. ## Linux For Linux desktop integration, F3D rely on mime types files as defined by the [XDG standard](https://specifications.freedesktop.org/mime-apps-spec/mime-apps-spec-latest.html), .thumbnailer file as specified [here](https://wiki.archlinux.org/title/File_manager_functionality#Thumbnail_previews) and .desktop file as specified [here](https://wiki.archlinux.org/title/desktop_entries). Many file managers use this mechanism, including nautilus, thunar, pcmanfm and caja. The simplest way to obtain desktop integration on linux is to use a package for your distribution, or the .deb binary release package we provide if compatible with your distribution. In other cases, the binary release archive can be used like this: 0. Make sure `~/.local/bin` is part of your `PATH` 1. Extract F3D binary release archive in `~/.local/` 2. Update your [mime database](https://linux.die.net/man/1/update-mime-database) pointing to `~/.local/share/mime` 3. Update your [desktop database](https://linuxcommandlibrary.com/man/update-desktop-database) pointing to `~/.local/share/application` ```bash export PATH=$PATH:~/.local/bin tar -xzvf f3d-1.3.0-Linux.tar.gz -C ~/.local/ sudo update-mime-database ~/.local/share/mime/ sudo update-desktop-database ~/.local/share/applications ``` If you have any issues, refer to the [troubleshooting](/pages/study-game-engines/f3d/doc/user/LIMITATIONS_AND_TROUBLESHOOTING.html) part. ## Windows For Windows desktop integration, F3D rely on a registered shell extension. Using the F3D NSIS installer (.exe) is the simplest way to enable thumbnails and integrate F3D on windows. It is also possible to do it manually when using the zipped binary release archive, on installation, just run: ``` cd C:\\path\\to\\f3d\\bin\\ regsvr32 F3DShellExtension.dll ``` To remove the shell extension, run: ``` cd C:\\path\\to\\f3d\\bin\\ regsvr32 /u F3DShellExtension.dll ``` ## MacOS There is no support for thumbnails on MacOS, the .dmg binary release provides automatic file openings. ## Limitations - TIFF files are excluded from the thumbnailer to avoid conflicts with other better 2D thumbnailers. ",
    "url": "/pages/study-game-engines/f3d/doc/user/DESKTOP_INTEGRATION.html",
    
    "relUrl": "/doc/user/DESKTOP_INTEGRATION.html"
  },"21": {
    "doc": "Installation",
    "title": "Installation",
    "content": "# Installation ## Current release packages (2.2.1) | Platform | Files | -------- | ----- | Windows Installer | [F3D-2.2.1-Windows.exe](https://github.com/f3d-app/f3d/releases/download/v2.2.1/F3D-2.2.1-Windows-x86_64-raytracing.exe) | Windows (Portable) | [F3D-2.2.1-Windows.zip](https://github.com/f3d-app/f3d/releases/download/v2.2.1/F3D-2.2.1-Windows-x86_64-raytracing.zip) | MacOS (Intel) | [F3D-2.2.1-macOS-x86_64.dmg](https://github.com/f3d-app/f3d/releases/download/v2.2.1/F3D-2.2.1-macOS-x86_64-raytracing.dmg) | MacOS (Silicon) | [F3D-2.2.1-macOS-arm64.dmg](https://github.com/f3d-app/f3d/releases/download/v2.2.1/F3D-2.2.1-macOS-arm64.dmg) | Debian-based Package | [F3D-2.2.1-Linux.deb](https://github.com/f3d-app/f3d/releases/download/v2.2.1/F3D-2.2.1-Linux-x86_64-raytracing.deb) | Linux (Portable) | [F3D-2.2.1-Linux.tar.xz](https://github.com/f3d-app/f3d/releases/download/v2.2.1/F3D-2.2.1-Linux-x86_64-raytracing.tar.xz) | Note: MacOS package is not signed, see the [troubleshooting](/pages/study-game-engines/f3d/doc/user/LIMITATIONS_AND_TROUBLESHOOTING.html) section for a workaround if needed. ## Alternatives You can find other (headless, older, smaller, checksum, RCs) release related packages and files on the [releases page](https://github.com/f3d-app/f3d/releases). You can also find there the [nightly release](https://github.com/f3d-app/f3d/releases/tag/nightly) to test the development version of F3D. See the [desktop integration](/pages/study-game-engines/f3d/doc/user/DESKTOP_INTEGRATION.html) section in order actually integrate the binary release in your desktop. Alternatively, you can build F3D yourself by following the [build](/pages/study-game-engines/f3d/doc/dev/BUILD.html) guide. You can also find packages for the following repositories: ### Windows - [Scoop](https://scoop.sh/#/apps?q=f3d&s=0&d=1&o=true) ### MacOS - [Homebrew](https://formulae.brew.sh/formula/f3d) ### Linux - [Ubuntu](https://packages.ubuntu.com/search?keywords=f3d&searchon=names&exact=1&suite=all&section=all) - [Debian](https://packages.debian.org/search?keywords=f3d&searchon=names&exact=1&suite=all&section=all) - [Arch](https://archlinux.org/packages/community/x86_64/f3d/) - [NixOS](https://search.nixos.org/packages?query=f3d) - [openSUSE](https://software.opensuse.org/package/f3d) - Fedora and others through [openSUSE OBS](https://build.opensuse.org/package/show/home:AndnoVember:F3D/f3d) - [Guix](https://packages.guix.gnu.org/packages/f3d/) - [Flathub](https://flathub.org/apps/details/io.github.f3d_app.f3d) ### Other - [FreeBSD](https://cgit.freebsd.org/ports/tree/graphics/f3d) - [Spack](https://packages.spack.io/package.html?name=f3d) - [pypi](https://pypi.org/project/f3d/) (library only) ",
    "url": "/pages/study-game-engines/f3d/doc/user/INSTALLATION.html",
    
    "relUrl": "/doc/user/INSTALLATION.html"
  },"22": {
    "doc": "Interactions",
    "title": "Interactions",
    "content": "# Interactions ## Mouse Interactions Simple interaction with the displayed data is possible directly within the window. It is as follows: * *Click and drag* with the *left* mouse button to rotate around the focal point of the camera. * Hold *Shift* then *Click and drag* horizontally with the *right* mouse button to rotate the HDRI. * *Click and drag* vertically with the *right* mouse button to zoom in/out. * *Move the mouse wheel* to zoom in/out. * *Click and drag* with the *middle* mouse button to translate the camera. * *Click* with the *middle* mouse button to center the camera on the point under the cursor (hold *Shift* to allow forward or backward movement). * Drag and drop a file, directory or HDRI into the F3D window to load it. F3D relies on the extension (`.hdr` or `.exr`) to detect if the dropped file is an HDRI. > Note: When playing an animation with a scene camera, camera interactions are locked. ## Hotkeys The coloring can be controlled directly by pressing the following hotkeys: * `C`: cycle between coloring with array from point data and from cell data. * `S`: cycle the array to color with. * `Y`: cycle the component of the array to color with. See the [coloring cycle](#cycling-coloring) section for more info. Other options can be toggled directly by pressing the following hotkeys: * `B`: display of the scalar bar, only when coloring and not using direct scalars. * `V`: volume rendering. * `I`: opacity function inversion during volume rendering. * `O`: point sprites rendering. * `P`: translucency support. * `Q`: ambient occlusion. * `A`: anti-aliasing. * `T`: tone mapping. * `E`: the display of cell edges. * `X`: the trihedral axes display. * `G`: the horizontal grid display. * `N`: the display of the file name. * `M`: the display of the metadata if exists. * `Z`: the display of the FPS counter. * `R`: raytracing. * `D`: the denoiser when raytracing. * `U`: background blur, useful with an HDRI skybox. * `K`: trackball interaction mode. * `F`: HDRI ambient lighting. * `J`: the display of the HDRI skybox. * `L`: increase (+Shift: decrease) lights intensity. Note that some hotkeys can be available or not depending on the file being loaded and the F3D configuration. Camera Hotkeys: * `1`: front view camera. * `3`: right view camera. * `7`: top view camera. * `9`: isometric view camera. * `ENTER`: reset the camera to its initial parameters. Other hotkeys are available: * `H`: key to toggle the display of a cheat sheet showing all these hotkeys and their statuses. * `?`: key to print scene description to the terminal. * `ESC`: close the window and quit F3D. * `SPACE`: play the animation if any. * `LEFT`: load the previous file if any. * `RIGHT`: load the next file if any. * `UP`: reload the current file without resetting the camera. * `DOWN`: add current file parent directory to the list of files, reload the current file and reset the camera. When loading another file or reloading, options that have been changed interactively are kept but can be overridden if a dedicated regular expression block in the configuration file is present, see the [configuration file](/pages/study-game-engines/f3d/doc/user/CONFIGURATION_FILE.html) documentation for more info. ## Cycling Coloring When using the default scene, the following hotkeys let you cycle the coloring of the data: * `C`: cycle between point data and cell data - field data is not supported. * `S`: cycle the array available on the currently selected data in alphabetical order, skipping array not containing numeric data. It will loop back to not coloring unless using volume rendering. * `Y`: cycle the component available on the currently selected array, looping to -2 for direct scalars rendering. When changing the array, the component in use will be kept if valid with the new array, if not it will be cycled until a valid component is found. When changing the type of data to color with, the index of the array within the data will be kept if valid with the new data. If not, it will cycle until a valid array is found. After that, the component will be checked as specified above. ",
    "url": "/pages/study-game-engines/f3d/doc/user/INTERACTIONS.html",
    
    "relUrl": "/doc/user/INTERACTIONS.html"
  },"23": {
    "doc": "Limitations and Troubleshooting",
    "title": "Limitations and Troubleshooting",
    "content": "# Limitations Here is a non exhaustive list of F3D limitations: * No support for specifying manual lighting in the default scene apart from using `--light-intensity` option. * Multiblock (.vtm, .gml) support is partial, non-surfacic data will be converted into surfaces. * Animation support with full scene data format require VTK >= 9.0.20201016. * Full drag and drop support require VTK >= 9.0.20210620 * Drag and drop interaction cannot be recorded nor played back. * Volume rendering and HDRI support requires a decent GPU. * The `--camera-zoom-factor` option require VTK >= 9.3.0 ## Assimp FBX, DAE, OFF, and DXF file formats rely on [Assimp](https://github.com/assimp/assimp) library. It comes with some known limitations: - PBR materials are not supported for FBX file format. - Complex animations are not working very well with Assimp 5.1, it's recommended to use Assimp 5.0 for this use case. - Only one animation can be shown at a time, showing all animations is not supported yet. - Some files can be empty, crash, or show artifacts. - DXF support is very limited: only files with polylines and 3D faces are displayed. ## Alembic ABC file formats rely on [Alembic](https://github.com/alembic/alembic) library. It comes with some known limitations: - Supports only simple polygonal geometry. - Does not support ArbGeomParam feature in Alembic. - Does not support Subdivision Meshes. - Does not support Materials. # Troubleshooting ## General > I have built F3D with raytracing support but the denoiser is not working. Make sure that VTK has been built with *OpenImageDenoise* support (`VTKOSPRAY_ENABLE_DENOISER` option). > My model shows up all wrong, with inverted surfaces everywhere. Your data probably contains some translucent data for some reason, turn on translucency support by pressing `P` or using the `-p` command line option. ## Linux > I have a link error related to `stdc++fs` not found. With some C++ STD library version, explicit linking to `stdc++fs` is not supported. We provide a CMake option `F3D_LINUX_APPLICATION_LINK_FILESYSTEM` that you can set to `OFF` to workaround this issue. > Thumbnails are not working in my file manager. * Check that your file manager supports the thumbnailer mechanism. * Check that you have updated your mime type database. * If all fails, remove your `.cache` user dir and check that `pcmanfm` thumbnails are working. * If they are working, then it is an issue specific to your file manager (see below for a potential work around). * If only a few format have working thumbnails, then it is an issue with the mime types database. * If no formats have working thumbnails, then it is an issue with the `f3d-plugin-xxx.thumbnailer` files. * If only big file do not have thumbnails, this is intended, you can modify this behavior in the `thumbnail.d/10_global.json` configuration folder using the `max-size` option. Some file managers (eg: Nautilus) are using sandboxing for thumbnails, which the F3D standard binary release does not support as it needs access to the Xorg server to render anything. In that case, you want to use the headless version of F3D that rely on EGL instead of Xorg, available in the [releases page](https://github.com/f3d-app/f3d/releases). If you use the portable archive, make sure to extract it somewhere the sandboxing system has access to, eg: Nautilus uses `bwrap` and gives it access to `/usr` but not to `/opt`. ## Windows > Using the portable binary release, I'm unable to run F3D because Windows warns about a security risk F3D is not signed by Microsoft yet so Windows shows this warning. Just click on the \"more\" button to be able to run F3D. > After installing F3D or registering the shell extension, my explorer is broken. Unregister the shell extension by running: ``` cd C:\\path\\to\\f3d\\bin\\ regsvr32 /u F3DShellExtension.dll ``` > I use F3D in a VM, the application fails to launch. OpenGL applications like F3D can have issues when launched from Windows Server or from a guest Windows because the access to the GPU is restricted. You can try to use a software implementation of OpenGL, called [Mesa](https://github.com/pal1000/mesa-dist-win/releases). * Download the latest `release-msvc`. * copy `x64/opengl32.dll`, `libgallium_wgl.dll` and `x64/libglapi.dll` in the same folder as `f3d.exe`. * set the environment variable `MESA_GL_VERSION_OVERRIDE` to 4.5. * run `f3d.exe`. > I run f3d from the command prompt and my Unicode characters are not displayed properly. Set the codepage to UTF-8, run `chcp 65001`. > When I install F3D, I can't add F3D to the path and the installer complains that: `PATH too long installer unable to modify PATH!`. There are too many entry in your PATH environment variable, remove the ones you do not use. > When I try to update F3D, the installer fails with: `Error opening file for writing: F3DShellExtension.dll` Your previous F3D installation is current being used to generate thumbnails, wait for a bit or reboot your computer before updating again. ## macOS > I'm unable to use the binary release, macOS complains the file is invalid or corrupted Our macOS binary package are not signed, to work around this, you can simply run the following command: ``` xattr -cr /Applications/F3D.app ``` Then F3D should work as expected. > Using the silicon binary release, I cannot find the raytracing feature or open exodus files F3D raytracing and exodus plugin are not working on macOS silicon yet, see this [issue](https://github.com/f3d-app/f3d/issues/976). > I'm unable to get coloring right with step files F3D on macOS does not support coloring on cells because of a [VTK issue](https://gitlab.kitware.com/vtk/vtk/-/issues/18969). ",
    "url": "/pages/study-game-engines/f3d/doc/user/LIMITATIONS_AND_TROUBLESHOOTING.html",
    
    "relUrl": "/doc/user/LIMITATIONS_AND_TROUBLESHOOTING.html"
  },"24": {
    "doc": "Options",
    "title": "Options",
    "content": "# Command line options F3D behavior can be fully controlled from the command line using the following options. ## Applicative Options Options|Default|Description ------|------|------ \\-\\-input=\\||The *input* file or files to read, can also be provided as a positional argument. \\-\\-output=\\||Instead of showing a render view and render into it, *render directly into a png file*. When used with \\-\\-ref option, only outputs on failure. \\-\\-no-background||Use with \\-\\-output to output a png file with a transparent background. -h, \\-\\-help||Print *help* and exit. \\-\\-version||Show *version* information and exit. \\-\\-readers-list||List available *readers* and exit. \\-\\-config=\\|config|Specify the [configuration file](/pages/study-game-engines/f3d/doc/user/CONFIGURATION_FILE.html) to use. Supports absolute/relative path but also filename/filestem to search for in standard configuration file locations. \\-\\-dry-run||Do not read any configuration file and consider only the command line options. \\-\\-no-render||Print information about the first provided file (as with \\-\\-verbose) and exit, without rendering anything, useful to recover information about a file. \\-\\-max-size=\\|-1|Prevent F3D to load a file bigger than the provided size in Mib, negative value means unlimited, useful for thumbnails. \\-\\-load-plugins=\\||List of plugins to load separated with a comma. Official plugins are `alembic`, `assimp`, `exodus`, `occt`. See [usage](/pages/study-game-engines/f3d/doc/user/USAGE.html) for more info. ## General Options Options|Default|Description ------|------|------ \\-\\-verbose||Enable *verbose* mode, providing more information about the loaded data in the console output. \\-\\-quiet||Enable quiet mode, which supersede any verbose options. No console output will be generated at all. \\-\\-progress||Show a *progress bar* when loading the file. \\-\\-geometry-only||For certain **full scene** file formats (gltf/glb and obj),reads *only the geometry* from the file and use default scene construction instead. \\-\\-group-geometries||When opening multiple files, show them all in the same scene.Force geometry-only. The configuration file for the first file will be loaded. \\-\\-up=\\|+Y|Define the Up direction. -x, \\-\\-axis||Show *axes* as a trihedron in the scene. -g, \\-\\-grid||Show *a grid* aligned with the horizontal (orthogonal to the Up direction) plane. \\-\\-grid\\-unit=\\||Set the size of the *unit square* for the grid. If set to non-positive (the default) a suitable value will be automatically computed. \\-\\-grid\\-subdivisions=\\||Set the number of subdivisions for the grid. -e, \\-\\-edges||Show the *cell edges*. \\-\\-camera-index=\\|-1|Select the scene camera to use when available in the file.Any negative value means automatic camera.The default scene always uses automatic camera. -k, \\-\\-trackball||Enable trackball interaction. \\-\\-animation-index=\\|0|Select the animation to show.Any negative value means all animations (glTF only).The default scene always has at most one animation. \\-\\-animation-speed-factor=\\|1|Set the animation speed factor to slow, speed up or even invert animation time. \\-\\-animation-frame-rate=\\|60|Set the animation frame rate used when playing animation interactively. \\-\\-font-file=\\||Use the provided FreeType compatible font file to display text.Can be useful to display non-ASCII filenames. ## Material options Options|Default|Description ------|------|------ -o, \\-\\-point-sprites||Show sphere *points sprites* instead of the geometry. \\-\\-point-size=\\|10.0|Set the *size* of points when showing vertices and point sprites. \\-\\-line-width=\\|1.0|Set the *width* of lines when showing edges. \\-\\-color=\\|1.0, 1.0, 1.0| Set a *color* on the geometry. Multiplied with the base color texture when present. Requires a default scene. \\-\\-opacity=\\|1.0|Set *opacity* on the geometry. Multiplied with the base color texture when present. Requires a default scene. Usually used with Depth Peeling option. \\-\\-roughness=\\|0.3|Set the *roughness coefficient* on the geometry (0.0-1.0). Multiplied with the material texture when present. Requires a default scene. \\-\\-metallic=\\|0.0|Set the *metallic coefficient* on the geometry (0.0-1.0). Multiplied with the material texture when present. Requires a default scene. \\-\\-hdri-file=\\||Set the *HDRI* image that can be used as ambient lighting and skybox.Valid file format are hdr, exr, png, jpg, pnm, tiff, bmp. If not set, a default is provided. \\-\\-hdri-ambient||Light the scene using the *HDRI* image as ambient lighting.The environment act as a light source and is reflected on the material. \\-\\-texture-matcap=\\||Set the texture file to control the material capture of the object. All other model options for surfaces are ignored if this is set. Must be in linear color space. \\-\\-texture-base-color=\\||Set the texture file to control the color of the object. Please note this will be multiplied with the color and opacity options. Must be in sRGB color space. \\-\\-texture-material=\\||Set the texture file to control the occlusion, roughness and metallic values of the object. Please note this will be multiplied with the roughness and metallic options, which have impactful default values. To obtain true results, use \\-\\-roughness=1 \\-\\-metallic=1. Must be in linear color space. \\-\\-texture-emissive=\\||Set the texture file to control the emitted light of the object. Please note this will be multiplied with the emissive factor. Must be in sRGB color space. \\-\\-emissive-factor=\\|1.0, 1.0, 1.0|Set the emissive factor. This value is multiplied with the emissive color when an emissive texture is present. ## Window options Options|Default|Description ------|------|------ \\-\\-bg-color=\\|0.2, 0.2, 0.2|Set the window *background color*.Ignored if *hdri* is set. \\-\\-resolution=\\|1000, 600|Set the *window resolution*. \\-\\-position=\\||Set the *window position* (top left corner) , in pixels, starting from the top left of your screens. -z, \\-\\-fps||Display a *frame per second counter*. -n, \\-\\-filename||Display the *name of the file* on top of the window. -m, \\-\\-metadata||Display the *metadata*.Empty without a default scene. \\-\\-hdri-skybox||Show the HDRI as a skybox. Overrides \\-\\-bg-color and \\-\\-no-background. -u, \\-\\-blur-background||Blur background.Useful with a HDRI skybox. \\-\\-blur-coc|20|Blur circle of confusion radius. \\-\\-light-intensity|1.0|*Adjust the intensity* of every light in the scene. ## Scientific visualization options Options|Default|Description ------|------|------ -s, \\-\\-scalars=\\||Specify an array to *Color* with if present in the file. If no array_name is provided, the first in alphabetical order will be picked if any are available. Requires a default scene.Use \\-\\-verbose to recover the usable array names. -y, \\-\\-comp=\\|-1|Specify the *component from the scalar* array to color with.Use with the scalar option. -1 means *magnitude*. -2 or the short option, -y, means *direct values*.When using *direct values*, components are used as L, LA, RGB, RGBA values depending on the number of components. -c, \\-\\-cells||Specify that the scalar array is to be found *on the cells* instead of on the points.Use with the scalar option. \\-\\-range=\\||Set a *custom range for the coloring* by the array.Use with the scalar option. -b, \\-\\-bar||Show *scalar bar* of the coloring by array.Use with the scalar option. \\-\\-colormap=\\||Set a *custom colormap for the coloring*.This is a list of colors in the format `val1,red1,green1,blue1,...,valN,redN,greenN,blueN`where all values are in the range (0,1).Use with the scalar option. -v, \\-\\-volume||Enable *volume rendering*. It is only available for 3D image data (vti, dcm, nrrd, mhd files) and will display nothing with other formats. -i, \\-\\-inverse||Inverse the linear opacity function used for volume rendering. ## Camera configuration options Options|Default|Description ------|------|------ \\-\\-camera-position=\\||Set the camera position, overrides --camera-direction and camera-zoom-factor. \\-\\-camera-focal-point=\\||Set the camera focal point. \\-\\-camera-view-up=\\||Set the camera view up vector. Will be orthogonalized. \\-\\-camera-view-angle=\\||Set the camera view angle, a strictly positive value in degrees. \\-\\-camera-direction=\\||Set the camera direction, looking at the focal point. \\-\\-camera-zoom-factor=\\||Set the camera zoom factor relative to the autozoom on data, a strictly positive value. \\-\\-camera-azimuth-angle=\\|0.0|Apply an azimuth transformation to the camera, in degrees, added after other camera options. \\-\\-camera-elevation-angle=\\|0.0|Apply an elevation transformation to the camera, in degrees, added after other camera options. ## Raytracing options Options|Default|Description ------|------|------ -r, \\-\\-raytracing||Enable *OSPRay raytracing*. Requires OSPRay raytracing to be enabled in the linked VTK dependency. \\-\\-samples=\\|5|Set the number of *samples per pixel* when using raytracing. -d, \\-\\-denoise||*Denoise* the image when using raytracing. ## PostFX (OpenGL) options Options|Description ------|------ -p, \\-\\-translucency-support|Enable *translucency support*. This is a technique used to correctly render translucent objects. -q, \\-\\-ambient-occlusion|Enable *ambient occlusion*. This is a technique used to improve the depth perception of the object. -a, \\-\\-anti-aliasing|Enable *anti-aliasing*. This technique is used to reduce aliasing. -t, \\-\\-tone-mapping|Enable generic filmic *Tone Mapping Pass*. This technique is used to map colors properly to the monitor colors. ## Testing options Options|Default|Description ------|------|------ \\-\\-ref=\\||Render and compare with the provided *reference image*, for testing purposes. Use with output option to generate new baselines and diff images. \\-\\-ref-threshold=\\ |50|Set the *comparison threshold* to trigger a test failure or success. The default (50) correspond to almost visually identical images. \\-\\-interaction-test-record=\\||Path to an interaction log file to *record interaction events* to. \\-\\-interaction-test-play=\\||Path to an interaction log file to *play interactions events* from when loading a file. ## Rendering options precedence Some rendering options are not compatible between them, here is the precedence order if several are provided: * Raytracing (`-r`) * Volume (`-v`) * Point Sprites (`-o`) ",
    "url": "/pages/study-game-engines/f3d/doc/user/OPTIONS.html",
    
    "relUrl": "/doc/user/OPTIONS.html"
  },"25": {
    "doc": "User Documentation",
    "title": "User Documentation",
    "content": "# User Documentation - [How to use F3D.](/pages/study-game-engines/f3d/doc/user/USAGE.html) - [How to install F3D.](/pages/study-game-engines/f3d/doc/user/INSTALLATION.html) - [List of all F3D command line options.](/pages/study-game-engines/f3d/doc/user/OPTIONS.html) - [The different interactions in F3D.](/pages/study-game-engines/f3d/doc/user/INTERACTIONS.html) - [How to configure F3D using a configuration file.](/pages/study-game-engines/f3d/doc/user/CONFIGURATION_FILE.html) - [How to integrate F3D in your desktop.](/pages/study-game-engines/f3d/doc/user/DESKTOP_INTEGRATION.html) - [Limitations and troubleshooting of F3D.](/pages/study-game-engines/f3d/doc/user/LIMITATIONS_AND_TROUBLESHOOTING.html) ",
    "url": "/pages/study-game-engines/f3d/doc/user/README_USER.html",
    
    "relUrl": "/doc/user/README_USER.html"
  },"26": {
    "doc": "Usage",
    "title": "Usage",
    "content": "# Usage Once F3D has been [installed](/pages/study-game-engines/f3d/doc/user/INSTALLATION.html), you should be able to open any [supported file](#supported-file-formats), by either: * Using F3D automatically, from your file manager, by directly opening a file. * Running F3D and then dragging and dropping files into it to open them. * By running F3D from the terminal with a set of command-line [options](/pages/study-game-engines/f3d/doc/user/OPTIONS.html). * As a [thumbnailer](/pages/study-game-engines/f3d/doc/user/DESKTOP_INTEGRATION.html) for all supported file formats with certain file managers. ## Supported file formats Here is the list of supported file formats: * **.vtk** : the legacy VTK format * **.vt[p\\|u\\|r\\|i\\|s\\|m]** : XML based VTK formats * **.ply** : Polygon File format * **.stl** : Standard Triangle Language format * **.dcm** : DICOM file format * **.nrrd/.nhrd** : \"nearly raw raster data\" file format * **.mhd/.mha** : MetaHeader MetaIO file format * **.tif/.tiff** : TIFF 2D/3D file format * **.ex2/.e/.exo/.g** : Exodus 2 file format * **.gml** : CityGML file format * **.pts** : Point Cloud file format * **.step/.stp** : CAD STEP exchange ISO format * **.iges/.igs** : CAD Initial Graphics Exchange Specification format * **.brep** : Open CASCADE BRep format * **.abc** : Alembic format * **.obj** : Wavefront OBJ file format (full scene and default scene) * **.gltf/.glb** : GL Transmission Format (full scene and default scene) * **.3ds** : Autodesk 3D Studio file format (full scene) * **.wrl** : VRML file format (full scene) * **.fbx** : Autodesk Filmbox (full scene) * **.dae** : COLLADA (full scene) * **.off** : Object File Format (full scene) * **.dxf** : Drawing Exchange Format (full scene) ## Scene construction The **full scene** formats (.gltf/.glb, .3ds, .wrl, .obj, .fbx, .dae, .off) contain not only *geometry*, but also some scene information like *lights*, *cameras*, *actors* in the scene, as well as *texture* properties. By default, all this information will be loaded from the file and displayed. Use the `--geometry-only` [options](/pages/study-game-engines/f3d/doc/user/OPTIONS.html) to modify this behavior. For file formats that do not support it, **a default scene** is created. ## Animations F3D can play animations for a number of file formats (.ex2/.e/.exo/.g, .gltf/.glb, .fbx, .dae) if the file contains an animation. It is possible to select the animation to play using `--animation-index`, or to play all animations at once using `--animation-index=-1` (.gltf/.glb only). When F3D play an animation, it assumes the time unit is in seconds to show accurate speed of animation. Use `--animation-speed-factor` if an adjustment is needed. By default, F3D will try update the scene 60 times per seconds, use `--animation-frame-rate` to change that if needed. ## Plugins If you installed F3D using a package manager, it's possible that the packager chose to bundle the plugins in different packages or to list plugin dependencies as optional dependencies to reduce the reduce the number of dependencies of the main package. In this case, in order to open a file that requires a plugin, you will have to make sure all needed dependencies are installed and specify which plugin you want to load in order to be able to open this file. You can either use the `--load-plugins` option or add a line in the [configuration file](/pages/study-game-engines/f3d/doc/user/CONFIGURATION_FILE.html), if not already. Several plugins can be specified by giving a comma-separated list. Here is the list of plugins provided officially by F3D: - **alembic**: ABC support - **assimp**: FBX, DAE, OFF and DXF support - **draco**: DRC support - **exodus**: EX2 support - **occt**: STEP and IGES support > Note: If you downloaded the binaries from the Release page, it's not necessary to specify manually the plugins above, all of them are loaded automatically. Here is how the plugins are searched (by precedence order): 1. Search the static plugins 2. Consider the option given is a full path 3. Search in the paths specified in `F3D_PLUGINS_PATH` environment variable 4. Search in a directory relative to the F3D application: `../lib` 5. Rely on OS specific paths (e.g. `LD_LIBRARY_PATH` on Linux or `DYLD_LIBRARY_PATH` on macOS) You can also try plugins maintained by the community. If you have created a plugin and would like it to be listed here, please submit a pull request. - **Abaqus**: ODB support by @YangShen398 ([repository](https://github.com/YangShen398/F3D-ODB-Reader-Plugin)) ",
    "url": "/pages/study-game-engines/f3d/doc/user/USAGE.html",
    
    "relUrl": "/doc/user/USAGE.html"
  }
}
